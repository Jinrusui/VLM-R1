### flTask Problem
main_p = "As a professional maze solver, your task is to analyze a grid-based map and devise an action plan that enables a player to reach the goal from the starting point without falling into any holes, using the fewest possible moves. Since coding is not within your skill set, your approach relies on logical reasoning of the map.\n\n## Game Setup\n- The game presents a fully observable grid-based map.\n- The player starts at a specified grid square, with the goal located elsewhere on the map.\n- Each grid square is either safe or contains a hole.\n- Your goal is to guide the player to the goal while avoiding holes.\n\n## Moving Rules\n- The action plan involves a series of moves: 'L' (left), 'R' (right), 'U' (up), or 'D' (down).\n- Each move transfers the player to the adjacent square in that direction, provided it is a safe square. The player cannot move more than one square at a time.\n- Moving off the edge of the map has no effect. The player will remain at the same square.\n- DO NOT MOVE INTO A HOLE! Falling into a hole results in defeat.\n- Locating at the grid containing the goal results in victory.\n\nPlease generate action plan for the given maze:\n\n"
t1_p ="In this task, you will analyze a maze to determine if there is a hole in a specific position.\nThe following figure illustrates the appearances of the player, holes, lands, and the goal within the maze. You will need to focus on the appearance of the hole.\n\nYour output should be: \"No\" or \"Yes\", depending on whether there is a hole at the specified position.\n\nNow you will analyze the given maze and answer the question:\n\n "
t2_p ="In this task, you will analyze a maze to determine the relative positions of the player and the goal.\n\nTo describe their relative positions, use the directional indicators from {\"Above\", \"Below\", \"Left\", \"Right\"}. Remember that we should answer the player's position with respect to the goal, not the opposite.\n\nYour output should be two parts:\n1. Analyze the rows and columns of the player and the goal. \n2. Following your analysis, output answer as \"<Position>\". For example,\"Above,Left\" means the player is above and to the left of the goal, and \"Below\" means the player is below the goal. \nNote that you should not output \"Left\" or \"Right\" if the plyaer and the goal are at the same column, and similarly, you should not output \"Above\" or \"Below\" if the player and the goal are at the same row.\n\nNow you will analyze the following maze and determine the relative position of the player in relation to the goal.\n\n"
t3_p ="In this task, you will analyze a maze presented in an image. Later, you will be presented with four choices, each offering a textual representation of a candidate maze. You will need to choose the representation that exactly reflects the contents of the given image.\n\nThis is how the player, the holes (non-safe grid), the lands (safe grids), and the goals look like in a map:\n- The player is represented as \"@\"\n- The hole is represented as \"#\"\n- The safe grid is represented as \"_\"\n- The goal is represented as \"*\"\n- If the player is at the goal (at this case the game is solved), that grid is represented as \"%\"\n\nYour output should consist of two parts:\n1. First, analysis the input image and candidates.\n2. Following the reasoning process, output answer as \"<Choice>\", where \"<Choice>\" is one of {A,B,C,D}.\nImportant: Note that there will be only one correct answer. If you find no answer or multiple answers, you must go back and recheck your reasoning process. You are not allowed to provide 0 or more than 1 answer.\n\nNow answer the question below. Here are the image input and the textual candidates:\n\n"
t4_p = "You are a maze-solving agent playing a pixelated maze videogame.\nMazes are presented on grid maps, where each tile can be empty land, or contain a player, hole, or goal.\nEach of the above tile types are represented as square pixel art images.\n\nIn this task, you will analyze a grid-based map and determine if a provided action plan is safe. A safe action plan avoids stepping into holes in the map.\n\n## Moving Rules\n- The action plan involves a series of moves: 'L' (left), 'R' (right), 'U' (up), or 'D' (down).\n- Each move transfers the player to the adjacent square in that direction, provided it is a safe square. The player cannot move more than one square at a time.\n- Moving off the edge of the map has no effect. The player will remain at the same square.\n- DO NOT MOVE INTO A HOLE! Falling into a hole results in defeat.\n- Locating at the grid containing the goal results in victory.\n\n## Procedure and Output\nYour output should include the following parts:\n1. First, interpret map. List where the player is at now, where is the goal, and where are the holes.\n2. Then, reasoning by following the given action plan. At each step, you should check:\n    (a) Where the current move leads the player to (the row and column);\n    (b) What is in that grid. Is it a hole? Is it the goal? Is it an empty space?\n    (c) Determine if that is a safe action.\n3. Output if the action sequence is safe using \"Yes\" or \"No\". A safe action sequence should not include any unsafe actions.\n\nNow please determine if the action sequence is safe for the given maze and action sequence:\n\n"


### Task Answer sft
main_a = """<think>\nThe player is at row 1, column 1, and the goal is at row 2, column 2.\nThere are 2 holes. They are at: row 3, column 2; row 3, column 3.\n<Action Plan>\n- Moving Right (R). The player is now at row 1, column 2. This grid is safe.\n- Moving Down (D). The player is now at row 2, column 2. This grid is the goal, so we stop here.\n<Verification>\n1. Right to row 1, column 2 (safe)\n2. Down to row 2, column 2 (goal)</think>\n<answer>\n{"path":["R","D"]}</answer>"""
t2_a = "<Interpret>\nThe player is at row 1, and the goal is at row 2. Remember that row number is counted from top to bottom. Comparing player (row=1) with goal (row=2), player is counted first, meaning player is higher. Therefore, the player is above the goal.\nThe player is at column 1, and the goal is at column 2. Remember that column number is counted from left to right. Comparing player (column=1) with goal (column=2), player is counted first, meaning player is to the left. Therefore, the player is to the left of the goal.\n<Output> Left,Above",




###block Task Problem
b1_p ="You are a robot that sorts and organizes colored blocks by adding and removing them to stacks.\nYou can move them between stacks to produce a desired end state.\n\nIn this task, you will see two photos of blocks showing the beginning and end states. Your goal is to find the shortest movement plan to transition between these states.\n\n### Game Rules\n- Each block has a unique color (blue, yellow, purple, orange, red, green).\n- Blocks are stacked vertically, and you can only move the top block of a stack.\n- Moves can:\n - Place the top block onto the top of another stack, or\n - Place the top block on the table to create a new stack.\n- Invalid moves: Attempting to move non-top blocks.\n- Order of stacks does not matter. Configurations are equivalent if stacks contain the same blocks, regardless of their arrangement.\n\n### Output Format\nList moves step-by-step using the format move(SOURCE, TARGET), where:\n- SOURCE is the color of the block being moved (always the top block of a stack).\n- TARGET is either a destination stack (specified by the color of its top block) or table (to create a new stack).\n\n### Task\nGenerate the shortest plan to transform the beginning state:\n<TEST-IMAGE-1>\n\ninto the end state:\n<TEST-IMAGE-2>\n"
print(
   b1_p
)